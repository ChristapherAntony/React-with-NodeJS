const commander = require('commander');
const mongoosen = require('./src/mongoosen');

commander
    .version('0.0.1')
    .usage('[options] schemaName')
    .option('-o, --output <outputPath>', 'Path to save file with schema')
    .option('-m, --with-model', 'Add model to schema file', false)
    .option('-j, --json-only', 'Generate json schema only', false)
    .parse(process.argv);


if(!commander.args.length) {
    commander.help();
} 
else
{
    if(!commander['jsonOnly'])
    {
        mongoosen.addGlobalStep({ text: 'Schema will have:_green i18n:_yellow fields?', key: 'i18n', values: [false, true], type: 'Boolean', default: 'false', plugin: 'mongoose-i18n-localize', pluginOptions: { locales: ['pl', 'en'] } })
        mongoosen.addGlobalStep({ text: 'Schema will have:_green timestampable:_yellow behavior?', key: 'timestampable', values: [false, true], type: 'Boolean', default: 'false', plugin: 'mongoose-timestamp'},)
        // mongoosen.addGlobalStep({ text: 'Schema will have:_green sluggable:_yellow behavior?', key: 'sluggable', type: 'String', default: 'false', plugin: 'mongoose-url-slugs', pluginFuncOptions: })
        mongoosen.addStep({ text: 'I18n', key: 'i18n', values: [false, true], type: 'Boolean', default: 'false'  })
    }
    mongoosen.start({name: commander.args[0], withModel: commander['withModel'], output: commander['output'], jsonOnly: commander['jsonOnly']})
}


